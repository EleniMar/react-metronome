{"version":3,"sources":["click1.wav","click2.wav","Metronome.js","NavigationBar.js","serviceWorker.js","index.js"],"names":["module","exports","Metronome","props","handleBpmChane","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","beatsPerMeasure","click2","play","click1","startStop","Audio","this","Container","className","Row","Col","ButtonGroup","vertical","block","size","Button","variant","onClick","type","min","max","onChange","Component","NavigationBar","Navbar","bg","Brand","href","Nav","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d51b7c82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\r\nimport {Container,Row,Col, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport click1 from './click1.wav';\r\nimport click2 from './click2.wav';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Metronome.css';\r\n\r\nclass Metronome extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            playing: false,\r\n            count: 0,\r\n            bpm: 60,\r\n            beatsPerMeasure:4\r\n        };\r\n        this.click1 = new Audio(click1);\r\n        this.click2 = new Audio(click2);\r\n    }\r\n\r\n    \r\n\r\n    handleBpmChane = event =>{\r\n        const bpm = event.target.value;\r\n        if(this.state.playing){\r\n            clearInterval(this.timer);\r\n            this.timer = setInterval(this.playClick, (60/bpm)*1000);\r\n            \r\n            this.setState({\r\n                count: 0,\r\n                bpm\r\n            });\r\n        }else{\r\n            this.setState({bpm});\r\n        }\r\n    }\r\n\r\n    playClick = () => {\r\n        const{ count, beatsPerMeasure} = this.state;\r\n\r\n        if( count%beatsPerMeasure ===0) {\r\n            this.click2.play();\r\n        }else{\r\n            this.click1.play();\r\n        }\r\n\r\n        this.setState(state => (\r\n            {\r\n                count: (state.count+1)%state.beatsPerMeasure\r\n            }\r\n        ));\r\n    };\r\n\r\n    startStop = () =>{\r\n        if(this.state.playing){\r\n        \r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                playing: false\r\n            });\r\n        }else {\r\n            this.timer = setInterval(\r\n                this.playClick,\r\n                (60/this.state.bpm)*1000\r\n            );\r\n            this.setState(\r\n                {\r\n                    count: 0,\r\n                    playing: true\r\n                },\r\n                this.playClick\r\n            );\r\n        }\r\n    };\r\n    render() {\r\n        const {playing, bpm}= this.state;\r\n\r\n        return (\r\n            <Container >\r\n                 \r\n                \r\n                <h1 className=\"text-center\">React.js Metronome</h1>\r\n                    \r\n                <Row className=\"row\">\r\n                    <Col className=\"col sgn-times\">\r\n                    <h4 className=\"text-center\">Time Signature:</h4>\r\n                    <ButtonGroup vertical block size=\"lg\" className=\"sign-times-group\">\r\n                        <Button variant=\"outline-primary\" className=\"sgntime-btn\" value=\"4\" onClick={()=>{this.setState({beatsPerMeasure: 4});}}>4/4</Button>\r\n                        <Button variant=\"outline-primary\" className=\"sgntime-btn\" value=\"3\" onClick={()=>{this.setState({beatsPerMeasure: 3});}}>3/4</Button>\r\n                        <Button variant=\"outline-primary\"className=\"sgntime-btn\" value=\"2\" onClick={()=>{this.setState({beatsPerMeasure: 2});}}>2/4</Button>\r\n                        <Button variant=\"outline-primary\"className=\"sgntime-btn\" value=\"1\" onClick={()=>{this.setState({beatsPerMeasure: 1});}}>1/4</Button>\r\n                    </ButtonGroup>\r\n                    </Col>\r\n                    <Col className=\"col\">\r\n                <div className=\"metronome\">\r\n                    <div className=\"bml-slider\">\r\n                        <div>\r\n                            {bpm} BPM\r\n                        </div>\r\n                        <input \r\n                            type=\"range\" \r\n                            min=\"60\" \r\n                            max=\"240\" \r\n                            value={bpm} \r\n                            onChange={this.handleBpmChane}/>\r\n                    </div>\r\n                    <Button className=\"btn-dark\" onClick={this.startStop}>{playing? 'Pause': 'Play'}</Button>\r\n                </div>\r\n                </Col>\r\n                </Row>  \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Metronome;\r\n\r\n","import React, { Component } from 'react';\r\nimport {Navbar, Nav} from 'react-bootstrap';\r\n\r\n\r\nclass NavigationBar extends Component {\r\n\r\n    render() {\r\n    return(\r\n        <div>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n            <Navbar.Brand href=\"#home\">React Metronome</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n            </Nav>\r\n  </Navbar>\r\n  </div>\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Container from 'react-bootstrap/Container';\nimport Metronome from './Metronome';\nimport NavigationBar from './NavigationBar';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode >\n    <NavigationBar />\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}